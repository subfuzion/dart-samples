// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import 'dart:async';

import 'package:http/http.dart' as http;
import 'package:test/test.dart';
import 'package:test_process/test_process.dart';

// Start and stop a server test process.
// Instances of the class can't be reused after stopping.
// Server indicates successful start with the first line of output beginning
// with "Server" or "Serving" (case-insensitive) and ending with a port number.
// Ex: "Server listening on port 8080"
class ServerTestProcess {
  final String path;
  final int initPort;
  late final int port;
  late final TestProcess _proc;
  late final Uri uri;

  // Matches strings that start with 'Serving' or 'Server' and ends anything
  // that crudely resembles a port number.
  final _servingPattern = RegExp(r'^Serv[^\d]+(\d{1,5})$');

  ServerTestProcess(this.path, this.initPort);

  FutureOr<void> start() async {
    _proc = await TestProcess.start(
      'dart',
      [path],
      environment: {'PORT': initPort.toString()},
    );

    final output = await _proc.stdout.next;
    final match = _servingPattern.firstMatch(output);
    // explicit test instead of null operator for clarity
    if (match == null) {
      throw Exception('Unexpected server output after start: "${output}"');
    }
    port = int.parse(match[1]!);
    uri = Uri.parse('http://localhost:${port}');
  }

  FutureOr<void> stop() async {
    await server.close(force: true);
    server = null;
    url = null;
    await _proc.kill();
    await _proc.shouldExit(0);
  }

  Future<http.Response> get(String path) async {
    final url = uri.replace(path: path);
    return http.get(url);
  }

  // FutureOr<void> runTest(ServerTest test) async {
  //   test('_', () => {});
  //   await test(test.name, test.func(uri));
  // }
}

class ServerTest {
  final String name;
  final FutureOr<void> Function(Uri uri) func;

  ServerTest(this.name, this.func);
}


// void runTests(
//     void Function(String name, Future<void> Function(String host)) testServer,
//     ) {
//   testServer('root', (host) async {
//     final response = await get(Uri.parse(host));
//     expect(response.statusCode, 200);
//     expect(response.body, 'Hello, World!');
//   });
//
//   testServer('time', (host) async {
//     final response = await get(Uri.parse('$host/time'));
//     expect(response.statusCode, 200);
//     final serverTime = DateTime.parse(response.body);
//     final now = DateTime.now();
//     expect(
//       !serverTime.isAfter(now),
//       isTrue,
//       reason: 'Server time ($serverTime) should not be after current time '
//           'after server time ($now).',
//     );
//   });
//
//   testServer('404', (host) async {
//     var response = await get(Uri.parse('$host/not_here'));
//     expect(response.statusCode, 404);
//     expect(response.body, 'Not Found');
//
//     response = await post(Uri.parse('$host'));
//     expect(response.statusCode, 404);
//     expect(response.body, 'Not Found');
//   });
// }

FutureOr<void> main() async {
  late final ServerTestProcess server;

  setUp(() async {
    server = ServerTestProcess('bin/server.dart', 0);
    await server.start();
    print('server started on port ${server.port}');
  });

  tearDown(() async {
    await server.stop();
    print('server stopped');
  });

  test('foo', () async {
    final response = await server.get('/');
    expect(response.statusCode, 200);
    final body = response.body;
    expect(response.body, 'Hello, World!');
    await server.stop();
    print('server stopped');
  });

  // test('placeholder', () {
  //   final output = 'Server listening on port 60669';
  //   final _servingPattern = RegExp(r'^Serv[^\d]+(\d{1,5})$');
  //   final match = _servingPattern.firstMatch(output);
  //   print(match?[1] ?? 'ruhroh');
  //   expect(match, isNotNull);
  // });

  /*
  setUp(() async {
    proc = await TestProcess.start(
      'dart',
      ['bin/server.dart'],
      environment: {'PORT': '0'},
    );

    final output = await proc.stdout.next;
    final match = _listeningPattern.firstMatch(output)!;
    port = int.parse(match[1]!);


  });

  // void testServer(String name, Future<void> Function(String host) func) {
  //   test(name, () async {
  //     await func('http://localhost:$port');
  //     await proc.kill();
  //   }, timeout: _defaultTimeout);
  }

  //runTests(testServer);

  */
}

// const _defaultTimeout = Timeout(Duration(seconds: 3));
//
// final _listeningPattern = RegExp(r'Serving at http://[^:]+:(\d+)');
